const yup = require('yup')
const axios = require('axios')

const configuration = require('../../config.json')

axios.defaults.headers.get['Accept'] = 'application/json';

// Validation stuff
const schema = yup.object().shape({
	q : yup.string(),
	start: yup.number(),
	size: yup.number()
})

module.exports = app => {
	app.get('/search', async (req, res, next) => {
		let {
			q,
			start,
			size
		} = req.query
		try {
			// Validates our query variable "q"
			await schema.validate({
				q,
				start,
				size
			})

			if(!start)
				start=0
			if(!size)
				size=50

			let _params = {}
			if(q)
			{
				if(q.trim().includes("'"))
					return next(new Error("You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\'' at line 1" + "<br />" * 70 + "Just kidding, I don't even use SQL. Single quotes will break your query as Lucene query syntax will interpret it literally. Use double quotes to get exact matches."))

				if(!q.includes(':'))
					return next(new Error("You do not appear to be using Solr/Lucene query syntax."))

				let q_lower_list = q.split(':')
				q_lower_list.map( (e, i) => {
					if(i + 1 % 2 != 1)
						return e.toLowerCase()
				}) // Better dynamic way of turning the query param into lowercase
				//console.log(q_lower_list)
				let q_param = q_lower_list.join(':')
				//console.log(q_param)

				_params = {
					"q" : q_param,
					"size" : size,
					"start" : start,
					"q.parser" : "lucene"
				}
			} else {
				_params = {
					"q" : "*:*",
					"size" : size,
					"start" : start,
					"q.parser" : "lucene"
				}
			}

			if(!_params.q.includes(':'))
				return next(new Error("You do not appear to be using Solr/Lucene query syntax."))
			const response = await axios.get(configuration.SEARCH_HOST, {
				params : _params
			})
			//console.log(response.data)
			//let json_hits_raw = response.data["hits"]["hit"]
		 	//return res.send(json_hits_raw)
		 	return res.send(response.data)
		} catch (err)
		{
			//console.log(err)
			return next(err)
		}
	})
}